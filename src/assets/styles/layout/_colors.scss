// usage: color("name_of_color", "type_of_color")
// to avoid to repeating map-get($colors, ...)

@function color($color, $type) {

	@if map-has-key($colors, $color) {

		$curr_color: map-get($colors, $color);

		@if map-has-key($curr_color, $type) {
			@return map-get($curr_color, $type);
		}
	}

	@warn "Unknown `#{$color}` - `#{$type}` in $colors.";

	@return null;
}

// Color Classes
@each $color_name,
$color in $colors {

	@each $color_type,
	$color_value in $color {

		@if $color_type=="base" {

			.bg-#{$color_name} {
				background-color: $color_value !important;
			}

			.bc-#{$color_name} {
				border-color: $color_value !important;
			}

			.fg-#{$color_name} {
				color: $color_value !important;
			}

			.bg-hover-#{$color_name}:hover {
				background-color: $color_value !important;
			}

			.bc-hover-#{$color_name}:hover {
				border-color: $color_value !important;
			}

			.fg-hover-#{$color_name} {
				color: $color_value !important;
			}
		}

		@else if $color_name !="shades" {

			.bg-#{$color_name}-#{$color_type} {
				background-color: $color_value !important;
			}

			.bc-#{$color_name}-#{$color_type} {
				border-color: $color_value !important;
			}

			.fg-#{$color_name}-#{$color_type} {
				color: $color_value !important;
			}

			.bg-hover-#{$color_name}-#{$color_type}:hover {
				background-color: $color_value !important;
			}

			.bc-hover-#{$color_name}-#{$color_type}:hover {
				border-color: $color_value !important;
			}

			.fg-hover-#{$color_name}-#{$color_type}:hover {
				color: $color_value !important;
			}
		}
	}
}

// Shade classes
@each $color,
$color_value in $shades {

	.bg-#{$color} {
		background-color: $color_value !important;
	}

	.bc-#{$color} {
		border-color: $color_value !important;
	}

	.fg-#{$color} {
		color: $color_value !important;
	}
}

// Gradient Colors
$red-gradient: linear-gradient(
	to top left,
	$orange-base,
	$materialize-red-base 70%
);
